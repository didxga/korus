==Performance Benchmark of Korus==

===1. Factorial Program===
Java code to calculate factorial of a large number (40000!). Compared the serial as well as parallel version.

====1.1 Testing Parallel For Construct Performance on Dual Core Machine====

=====1.1.1 Program to Calculate Factorial Program using Serial Single Thread Execution=====

||S.No.||No. of Threads||Time in milliseconds||
||1.||1||10316||

=====1.1.2 Program to Calculate Parallel Factorial Program using Korus Library=====

||S.No.||Grain Size||No. of Threads||Time in milliseconds||
||1.||40000||1||10300||
||2.||20000||2||4532||

====1.2 Testing Parallel For Construct Performance on Azul Machine====

=====1.2.1 Program to Calculate Factorial Program using Serial Single Thread Execution=====

||S.No.||No. of Threads||Time in milliseconds||
||1.||1||39380||

=====1.2.2 Program to Calculate Parallel Factorial Program using Korus Library=====

||S.No.||Grain Size||No. of Threads||Time in milliseconds||
||1.||40000||1||39380||
||2.||20000||2||13540||	
||3.||10000||4||6590|| 
||4.||8000||5||5826||
||5.||5000||8||5024||
||6.||4000||10||7717||
||7.||2500||16||7694|| 
||8.||2000||20||7535||

----

===2. Area Under Curve===

The trapezoidal rule is a numerical integration method to be used to approximate the integral or the area under a curve. This is often useful when an exact integral does not exist, can not easily be obtained, or is mathematically too time consuming for repetitious automated calculations.

One approach to obtain a numerical solution of an integral is to approximate the function with an nth order polynomial, since these are relatively simple to integrate. The choice of the order of the polynomial depends on the required accuracy (higher order generally results in a higher precision), and the number data points over the selected interval (higher order requires more data points).

Consider the function f(x). We want to calculate the area under the curve over the interval a ≤ x ≤ b:
{{{
         b
     I = ∫ y(x)dx
         a
}}}

====2.1 Results on Dual Core====

=====2.1.1 Program to Calculate Area under Curve using Serial Single Thread Execution=====

||S.No||Number of Threads|| Time in milliseconds||
||1.||1||1407||

=====2.1.2 Program to Calculate Area under Curve using Korus Library=====

||S.No||Number of Threads|| Time in milliseconds||
||1.||1||1407||
||2.||2||766||


====2.2 Results on Azul Machine====

=====2.2.1 Program to Calculate Area under Curve using Serial Single Thread Execution=====

||S.No||Number of Threads|| Time in milliseconds||
||1.||1||18571||

=====2.2.2 Program to Calculate Area under Curve using Korus Library=====

||S.No||Number of Threads|| Time in milliseconds||
||1.||1||16492||
||2.||2||8370||
||3.||4||4310||
||4.||8||2262||
||5.||16||1259||
||6.||20||1050^*^||
||7.||24||1533||

^*^ Optimized Performance

----

===3. Spearman's rank correlation coefficient===

Spearman's rank correlation coefficient measure of the strength of the associations between two variables, without making any assumptions about the frequency distribution of the variables.

In principle, ρ is simply a special case of the Pearson product-moment coefficient in which two sets of data Xi and Yi are converted to rankings xi and yi before calculating the coefficient. But practically a simpler procedure is adopted and used to calculate ρ. Ranks are calculated based on available data, and the differences di between the ranks of each observation on the two variables are calculated.

Therefore ρ is given by:

	[http://code.google.com/ http://korus.googlecode.com/files/rho.JPG]

where:

    di = xi − yi = the difference between the ranks of corresponding values Xi and Yi, and

    n = the number of values in each data set (same for both sets). 

====3.1 Results on Dual Core====

===== 3.1.1 Program to Spearman's rank correlation coefficient using Serial Single Thread Execution (Data Size - 1000000) =====

|| S.No || Number of Threads || Time in milliseconds ||
||1.||1||234||

=====3.1.2 Program to Spearman's rank correlation coefficient using Korus Library (Data Size - 1000000)=====

||S.No||Number of Threads|| Time in milliseconds||
||1.||1||250||
||2.||2||171||


====3.2 Results on Azul Machine====

=====3.2.1 Program to Calculate Area under Curve using Serial Single Thread Execution=====

||S.No||Number of Threads|| Time in milliseconds||
||1.||1||892||

=====3.2.2 Program to Calculate Area under Curve using Korus Library=====

||S.No||Number of Threads|| Time in milliseconds||
||1.||1||1067||
||2.||2||659||
||3.||4||463||
||4.||8||357||
||5.||16||313||
||6.||20||307^*^||
||7.||24||310||

^*^ Optimized Performance

----


===4. Parallel Text Transformer Program===

This involved writing an application which reads a Text file, transforms and writes it into another file. A serial as well as a parallel version were written. The parallel version utilized 3 cores for each of the reading, transforming and writing tasks. The parallel version was written using Korus.

*Testing Pipeline Construct – File Size 2.5MB (approx)*
||S.No.||Program||Dual Core||Single Core||Azul||
||1.||SerialReadTransformWrite||1000ms||406ms||1747ms||
||2.||ParallelReadTransformWrite||105ms^*^||16ms^*^||75ms^*^||

^*^ _Time denoted here is the response time and not the execution time._