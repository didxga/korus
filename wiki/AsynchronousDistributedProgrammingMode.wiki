Korus can be used for Asynchronous & Distributed Programming as below
=== Code Structure ===

The structure below shows, how a use case will look when it is broken up into processes. Suppose we have a Buy UseCase in which a number of tasks are performed one after the other serially. Typically, we will use methods to maintain modularity. These methods can very well be candidates for processes. Therfore, a big UseCase now becomes a set of smaller processes. Here, we can see BuyProcess1, BuyProcess2 and BuyProcess3 which are nothing but pieces of the bigger BuyProcess.

[http://korus.googlecode.com/svn/trunk/Support/images/korus_code_structure.JPG]

=== Sample Implementation ===

{{{

import com.impetus.labs.korus.core.KorusRuntime;
import com.impetus.labs.korus.core.Message;
import com.impetus.labs.korus.exception.ProcessAlreadyExistsException;

/**
 * Tests message Passing Between Processes
 *
 */
public class TestProcess {
	
	public static void main(String args[])
	{
	
	// Create two Processes
	BuyProcess1 buyProcess1 = new BuyProcess1();
	BuyProcess2 buyProcess2 = new BuyProcess2();
	
	// Register them with the Korus Runtime
	try
	{
		KorusRuntime.registerProcess("buyProcess1", buyProcess1);
		KorusRuntime.registerProcess("buyProcess2", buyProcess2);
	} catch (ProcessAlreadyExistsException e)
	{			
		e.printStackTrace();
	}
	
	Message msg = new Message();
	String itemName = "Calculator";
	msg.put("itemName", itemName);
	KorusRuntime.send("buyProcess1", msg);
	
	}
}

}}}

Create Two Processes Called BuyProcess1 and BuyProcess2. Below, is the Code for BuyProcess1:

{{{
import com.impetus.labs.korus.core.KorusRuntime;
import com.impetus.labs.korus.core.Message;
import com.impetus.labs.korus.core.Process;


// Import other necessary Business Logic Packages and Classes

/**
 * BuyProcess1 Extends Abstract Process Class
 */
public class BuyProcess1 extends Process {

	// Overide the service Method
	
	public void service(Message requestMessage) {
		// Get item name from the Message Object
		String itemName = (String) requestMessage.get("itemName");
		System.out.println("Name of the Item: " + itemName);
		
		// Rest of the Business Logic
		int priceOfItem = fetchDetails(itemName);

		// Put the intermediate result in the Message Object for next 
		// process
		requestMessage.put("priceOfItem", priceOfItem);

		// Send Message Asynchronously to the next Process on Local Node
		KorusRuntime.send("buyProcess2", requestMessage);
		
		// Send Message Asynchronously to the next Process on Remote Node
		// Set only String Objects in the Message in case of Remote Calls
		//KorusRuntime.send("hostname", "buyProcess2", requestMessage)
	}

	/**
	 * Method to Fetch Details of an item. To keep it simple just returning
	 * an integer called price
	 * @param itemName Name of the Item
	 * @return price of the Item
	 */
	private int fetchDetails(String itemName) {
		// Some dummy code
		// Method Implementation ...
		int price = 20;
		return price;
		

	}
}
}}}

Code for BuyProcess2:
{{{

import com.impetus.labs.korus.core.KorusRuntime;
import com.impetus.labs.korus.core.Message;
import com.impetus.labs.korus.core.Process;

// Import other necessary Business Logic Packages and Classes

/**
 * BuyProcess2 Extends Abstract Process Class
 */
public class BuyProcess2 extends Process {

	// Overide the service Method

	public void service(Message requestMessage) {
		// Get item name from the Message Object
		int priceOfItem = ((Integer) requestMessage.get("priceOfItem"))
				.intValue();

		// Rest of the Business Logic
		String itemRating = rateItem(priceOfItem);

		System.out.println("Rating of an Item: " + itemRating);
		
		// Forcefully Shutting the Korus Runtime if not needed
		System.exit(0);

	}

	/**
	 * Rates an item on basis of its cost
	 * @param priceOfItem price of the Item to be rated
	 * @return Rating of an Item
	 */
	private String rateItem(int priceOfItem) {
		// Some dummy code
		// Method Implementation ...
		String itemRating = "";
		if (priceOfItem > 50)
			itemRating = "Item is Expensive";
		else
			itemRating = "Item is Affordable";

		return itemRating;

	}
}

}}}