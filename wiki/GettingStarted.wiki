#labels Featured
This page provides you a step-by-step to get started with korus

== OS Platform ==

Korus is Tested on Windows XP and Linux Platforms. Since, it is a purely java based framework it should run on all the platforms supporting java.

== Prerequisites ==
JDK 1.5 and above

== Getting Started Quickly ==
Download Sample.zip from [http://korus.googlecode.com/svn/trunk/Product/korus/example/Sample.zip HERE]
This will contain

  # korus.jar
  # BuyProcess1.java
  # BuyProcess2.java
  # TestProcess.java
  # sourcefiles
  # run.bat (Windows environment)
  # run.sh (linux/unix environment)

To test run the batch file _run.bat_

== Getting Started Slowly ==

== 1. Getting Korus ==

The latest stable version of Korus is available from the Korus web page http://code.google.com/p/korus/source/checkout 

For the current version of Korus, you will also need a JDK installed on your system, version 1.5 or later required, 1.5 or later strongly recommended. 

The binary distribution of  consists of the following directory layout:
{{{
 Korus
   +--- Plan
   |
   +--- Product // contains API Files
   |      |
   |      +--- korus
   |              |
   |              +--- bin        // Compiled Code
   |              +--- build      // Build Scripts
   |              +--- dst        
   |              +--- jar        // Compiled Jar
   |              +--- javadoc    // Java Documentation
   |              +--- src        // Source Files
   |              +--- properties // Property Files
   |
   +--- Support  // Contains the supporting files
   |      |
   |      +--- ant
   |      +--- legal
   |      +--- userdocs
   |
   +--- Test // contains Test Classes
          |
          +--- bin        // Compiled Code of Test Classes
          +--- lib        // Libraries needed by Test Classes
          +--- report
          +--- src        // Source Files for Test Classes
          +--- files      // Files needed by the Test Classes
   
}}}

=== 1.1 Checkout Korus ===
==== 1.1.1 ====

Use an SVN client and checkout korus
{{{
  $ svn checkout http://korus.googlecode.com/svn/trunk/ korus-read-only
}}}

=== 1.2 Install Ant ===

Install ant from [http://ant.apache.org/ here]


=== 1.3 Building Korus ===

==== 1.3.1 Windows ====

Go to the Korus --> Product --> korus Folder

{{{
 > cd build
 > ant clean
 > ant compile
 > ant jar
}}}

This will generate the jar in your Korus --> Product --> korus --> jar Folder. You can then either put the JAR of Korus to your preferred directory or put the jars on the system CLASSPATH. 

If you prefer to the source edition, you can find it in the Korus --> Product --> korus --> src Folder. 

For only using the compiled classes you need to :

{{{
 > cd build
 > ant clean
 > ant compile
}}}

This will compile the Java classes and into the Korus --> Product --> korus --> bin Folder.

For compiling test classes.

{{{
 > cd build
 > ant test_compile
}}}

Compile it using the java compile commands and you can start using it in your Project.

Or else you can also use java command-line options
*Example:* java -classpath C:\korus0.1\Test\bin;C:\korus0\Product\korus\jar\korus.jar com.impetus.labs.korus.test.pipeline.PipelineTest

==== 1.3.2 Unix ====

Go to the Korus --> Product --> korus Folder

{{{
 $ cd build
 $ ./ant.sh clean
 $ ./ant.sh compile
 $ ./ant.sh jar
}}}

This will generate the jar in your Korus --> Product --> korus --> jar Folder. You can then either put the JAR of Korus to your preferred directory or put the jars on the system CLASSPATH. 

If you prefer to the source edition, you can find it in the Korus --> Product --> korus --> src Folder. 

For only using the compiled classes you need to :

{{{
 $ cd build
 $ ./ant.sh clean
 $ ./ant.sh compile
}}}

This will compile the Java classes and into the Korus --> Product --> korus --> bin Folder.

For compiling test classes.

{{{
 > cd build
 > ./ant.sh test_compile
}}}

Compile it using the java compile commands and you can start using it in your Project.

Or else you can also use java command-line options
*Example:* java -cp '/home/user/svn_repo/korus0.1/Test/bin:/home/user/svn_repo/korus0.1/Product/korus/jar/korus.jar' com.impetus.labs.korus.test.pipeline.PipelineTest

----

== 2. Configuring Korus ==

*Step 1.* Set the enviorment variable KORUS_HOME pointing to the korus installation directory. 
Example: KORUS_HOME=Product/korus

*Step 2. (Optional)* In the KORUS_HOME/properties edit the config file korus.properties. Change the properties to fine tune the korus runtime as per the system configuration

*If the properties file is not configured korus runs with default properties.*
----

== 3. Using Korus ==

=== 3.1 Code Structure ===

The structure below shows, how a use case will look when it is broken up into processes. Suppose we have a Buy UseCase in which a number of tasks are performed one after the other serially. Typically, we will use methods to maintain modularity. These methods can very well be candidates for processes. Therfore, a big UseCase now becomes a set of smaller processes. Here, we can see BuyProcess1, BuyProcess2 and BuyProcess3 which are nothing but pieces of the bigger BuyProcess.

[http://img41.imageshack.us/img41/4347/packagekorus.jpg]

=== 3.2 Sample Implementation ===

{{{

import com.impetus.labs.korus.core.KorusRuntime;
import com.impetus.labs.korus.core.Message;
import com.impetus.labs.korus.exception.ProcessAlreadyExistsException;

/**
 * Tests message Passing Between Processes
 *
 */
public class TestProcess {
	
	public static void main(String args[])
	{
	
	// Create two Processes
	BuyProcess1 buyProcess1 = new BuyProcess1();
	BuyProcess2 buyProcess2 = new BuyProcess2();
	
	// Register them with the Korus Runtime
	try
	{
		KorusRuntime.registerProcess("buyProcess1", buyProcess1);
		KorusRuntime.registerProcess("buyProcess2", buyProcess2);
	} catch (ProcessAlreadyExistsException e)
	{			
		e.printStackTrace();
	}
	
	Message msg = new Message();
	String itemName = "Calculator";
	msg.put("itemName", itemName);
	KorusRuntime.send("buyProcess1", msg);
	
	}
}

}}}

Create Two Processes Called BuyProcess1 and BuyProcess2. Below, is the Code for BuyProcess1:

{{{
import com.impetus.labs.korus.core.KorusRuntime;
import com.impetus.labs.korus.core.Message;
import com.impetus.labs.korus.core.Process;


// Import other necessary Business Logic Packages and Classes

/**
 * BuyProcess1 Extends Abstract Process Class
 */
public class BuyProcess1 extends Process {

	// Overide the service Method
	
	public void service(Message requestMessage) {
		// Get item name from the Message Object
		String itemName = (String) requestMessage.get("itemName");
		System.out.println("Name of the Item: " + itemName);
		
		// Rest of the Business Logic
		int priceOfItem = fetchDetails(itemName);

		// Put the intermediate result in the Message Object for next 
		// process
		requestMessage.put("priceOfItem", priceOfItem);

		// Send Message Asynchronously to the next Process on Local Node
		KorusRuntime.send("buyProcess2", requestMessage);
		
		// Send Message Asynchronously to the next Process on Remote Node
		// Set only String Objects in the Message in case of Remote Calls
		//KorusRuntime.send("hostname", "buyProcess2", requestMessage)
	}

	/**
	 * Method to Fetch Details of an item. To keep it simple just returning
	 * an integer called price
	 * @param itemName Name of the Item
	 * @return price of the Item
	 */
	private int fetchDetails(String itemName) {
		// Some dummy code
		// Method Implementation ...
		int price = 20;
		return price;
		

	}
}
}}}

Code for BuyProcess2:
{{{

import com.impetus.labs.korus.core.KorusRuntime;
import com.impetus.labs.korus.core.Message;
import com.impetus.labs.korus.core.Process;

// Import other necessary Business Logic Packages and Classes

/**
 * BuyProcess2 Extends Abstract Process Class
 */
public class BuyProcess2 extends Process {

	// Overide the service Method

	public void service(Message requestMessage) {
		// Get item name from the Message Object
		int priceOfItem = ((Integer) requestMessage.get("priceOfItem"))
				.intValue();

		// Rest of the Business Logic
		String itemRating = rateItem(priceOfItem);

		System.out.println("Rating of an Item: " + itemRating);
		
		// Forcefully Shutting the Korus Runtime if not needed
		System.exit(0);

	}

	/**
	 * Rates an item on basis of its cost
	 * @param priceOfItem price of the Item to be rated
	 * @return Rating of an Item
	 */
	private String rateItem(int priceOfItem) {
		// Some dummy code
		// Method Implementation ...
		String itemRating = "";
		if (priceOfItem > 50)
			itemRating = "Item is Expensive";
		else
			itemRating = "Item is Affordable";

		return itemRating;

	}
}

}}}