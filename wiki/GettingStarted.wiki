#labels Phase-Deploy,Featured
This page provides you a step-by-step to get started with korus

== 1. Getting Korus ==

The latest stable version of Korus is available from the Korus web page http://code.google.com/p/korus/source/checkout 

For the current version of Korus, you will also need a JDK installed on your system, version 1.5 or later required, 1.5 or later strongly recommended. 

The binary distribution of  consists of the following directory layout:
{{{
 Korus
   +--- Plan
   |
   +--- Product // contains API Files
   |      |
   |      +--- korus
   |              |
   |              +--- bin        // Compiled Code
   |              +--- build      // Build Scripts
   |              +--- dst        
   |              +--- jar        // Compiled Jar
   |              +--- javadoc    // Java Documentation
   |              +--- src        // Source Files
   |              +--- properties // Property Files
   |
   +--- Support  // Contains the supporting files
   |      |
   |      +--- ant
   |      +--- legal
   |      +--- userdocs
   |
   +--- Test // contains Test Classes
          |
          +--- bin        // Compiled Code of Test Classes
          +--- lib        // Libraries needed by Test Classes
          +--- report
          +--- src        // Source Files for Test Classes
          +--- files      // Files needed by the Test Classes
   
}}}

=== 1.1 Checkout Korus ===
==== 1.1.1 ====

Use an SVN client and checkout korus
{{{
  $ svn checkout http://korus.googlecode.com/svn/trunk/ korus-read-only
}}}

=== 1.2 Install Ant ===

Install ant from [http://ant.apache.org/ here]


=== 1.3 Building Korus ===

==== 1.3.1 Windows ====

Go to the Korus --> Product --> octopus Folder

{{{
 > cd build
 > ant clean
 > ant compile
 > ant jar
}}}

This will generate the jar in your Korus --> Product --> korus --> jar Folder. You can then either put the JAR of Korus to your preferred directory or put the jars on the system CLASSPATH. 

If you prefer to the source edition, you can find it in the Korus --> Product --> korus --> src Folder. 

For only using the compiled classes you need to :

{{{
 > cd build
 > ant clean
 > ant compile
}}}

This will compile the Java classes and into the Korus --> Product --> korus --> classes Folder.

For compiling test classes.

{{{
 > cd build
 > ant test_compile
}}}

Compile it using the java compile commands and you can start using it in your Project.

==== 1.3.2 Unix ====

Go to the Korus --> Product --> korus Folder

{{{
 $ cd build
 $ ./ant.sh clean
 $ ./ant.sh compile
 $ ./ant.sh jar
}}}

This will generate the jar in your Korus --> Product --> korus --> jar Folder. You can then either put the JAR of Korus to your preferred directory or put the jars on the system CLASSPATH. 

If you prefer to the source edition, you can find it in the Korus --> Product --> korus --> src Folder. 

For only using the compiled classes you need to :

{{{
 $ cd build
 $ ./ant.sh clean
 $ ./ant.sh compile
}}}

This will compile the Java classes and into the Korus --> Product --> korus --> classes Folder.

Compile it using the java compile commands and you can start using it in your Project.

----

== 2. Configuring Korus (Optional)==


Step 1. Create the directory ../properties w.r.t. the /lib or /bin of the project. When you check out the project, it is by default found at the desired location.

Step 2. Edit the config file properties/korus.properties Change the properties to fine tune the korus runtime as per the system configuration

*If the properties file is not configured korus runs with default properties.*

== 3. Using Korus ==

=== 3.1 ParallelFor Concepts ===

[http://code.google.com/p/korus/wiki/ParallelFor Click Here] for a sample implementation of _ ParallelFor _.

==== 3.1.1 BlockedRange ====
<TODO> DEFINE PROPERLY <TODO>
It is a single unit of block that can be executed in a single iteration. Suppose, we have an iteration space from 0 to n. Then, an object of blocked range will be constructed whose first argument will be the start of the iteration and second argument will be end of the iteration. A third argument _ grainSize _ will also have to be specified which breaks these _ BlockedRanges _ into units which can be executed by a single core or processor.
{{{
BlockedRange range= new BlockedRange(1,10000,1250);
}}}

will finally construct  10000/1250 = 8 _ BlockedRanges _

==== 3.1.2 GrainSize ====

The _grainSize_ enables you to decide the degree of parallelism you want achieve while running your program. It helps in dividing the task into sub-ranges. Every sub-range has some cost associated to it. A smaller _grainsize_ may also result in excessive overhead and may hinder useful work. So, the size of the _grainsize_ has to be chosen very carefully. 

==== 3.1.3 ParallelTask ====
In order to write a parallel function in a class, it has to extend a _ ParallelTask _. A _ ParallelTask _ bounds the user to implement a _execute()_ and a _summarize()_ method. The code written inside the for block of a serial function comes in the for block of the _execute()_ method. A _summarize()_ block is written in order to summarize all the intermediate results. 

[http://code.google.com/p/korus/wiki/ParallelFor Click Here] for a sample implementation of _ ParallelFor _. 

=== 3.2 Pipeline Concepts ===

[http://code.google.com/p/korus/wiki/Pipeline Click Here] for a sample implementation of _ Pipeline _.

==== 3.2.1 Pipeline ====
The term pipeline refers to the fact that each step is carrying data at once (like water), and each step is connected to the next (like the links of a pipe)

- Wikipedia

The idea of a pipeline is to split the processing of data into number of steps. Each of these steps will run independently, process data and put the data in its _ outputQueue _. The _ outputQueue _ of the first step will be the _ inputQueue _ for the consecutive step. The first step will have no _ inputQueue _ and the last step will have no _ outputQueue _. 

==== 3.2.2 PipelineTask  ====

In order to implement pipeline, stages or pipeline tasks need to be written. These tasks are written by extending a _ PipelineTask _ and overriding its _ execute() _ method.

These tasks are then added to the pipeline, paired (in order to decide the order of tasks) and executed. A pipeline task just has a _ execute() _ method and no _ summarize() _ method. 

[http://code.google.com/p/korus/wiki/Pipeline Click Here] for a sample implementation of a _ Pipeline _.