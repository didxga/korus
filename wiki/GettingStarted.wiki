#labels Phase-Deploy,Featured
This page provides you a step-by-step to get started with korus

= Getting Korus =

== Binary Edition ==

The latest stable version of Korus is available from the Korus web page http://code.google.com/p/korus/source/checkout 

You can then either put the JARs of Korus to your preferred directory or put the jars on the system classpath. 

For the current version of Korus, you will also need a JDK installed on your system, version 1.5 or later required, 1.5 or later strongly recommended. 

== Source Edition ==

If you prefer the source edition, you can download the source for the latest Korus release from http://code.google.com/p/korus/source/checkout. You can access the code using SVN. The Korus website has details on accessing SVN. 

See the section Building Korus on how to build Korus from the source code.

The binary distribution of  consists of the following directory layout:
{{{
  Korus
   +--- README, LICENSE, other text files. //basic information
   +--- bin  // contains launcher scripts
   |
   +--- lib  // contains jars plus necessary dependencies
   |
   +--- docs // contains documentation
   |      |
   |      +--- images  // various logos for html documentation
   |      |
   |      +--- manual  // Documentation (a must read ;-)
   |
   +--- etc 
}}}

== Checkout Korus ==
Use an SVN client 
{{{
  $ svn checkout http://korus.googlecode.com/svn/trunk/ korus-read-only
}}}

==Building Korus==
{{{
 $ cd build
 $ ./ant.sh clean
 $ ./ant.sh recompile
 $ ./ant.sh jar
}}}

= Using Korus =
==Parallel For Concepts==

=== !BlockedRange ===

It is a single unit of block that can be executed in a single iteration. Suppose, we have an iteration space from 0 to n. Then, an object of blocked range will be constructed whose first argument will be the start of the iteration and second argument will be end of the iteration. A third argument _ grainSize _ will also have to be specified which breaks these _ BlockedRanges _ into units which can be executed by a single core or processor.
{{{
BlockedRange range= new BlockedRange(1,10000,1250);
}}}

will finally construct  10000/1250 = 8 _ BlockedRanges _

=== !GrainSize ===

The _grainSize_ enables you to decide the degree of parallelization you want achieve while running your program. It helps in dividing the task into subranges. Every subrange has some cost associated to it. A smaller _grainsize_ may also result in excessive overhead and may hinder useful work. So, the size of the _grainsize_ has to be chosen very carefully. 

=== !ParallelTask ===
In order to write a parallel function in a class, it has to implement a _ ParallelTask _. A _ ParallelTask _ bounds the user to implement a _service()_ and a _summarize()_ method. The code written inside the for block of a serial function comes in the for block of the _service()_ method. A _summarize()_ block is written in order to summarize all the intermediate results. A demonstration is provided [http://code.google.com/p/korus/wiki/ParallelFor here].